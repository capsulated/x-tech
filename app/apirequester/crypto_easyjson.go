// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apirequester

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1fea425fDecodeGithubComCapsulatedXTechApirequester(in *jlexer.Lexer, out *CryptoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "data":
			easyjson1fea425fDecode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1fea425fEncodeGithubComCapsulatedXTechApirequester(out *jwriter.Writer, in CryptoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjson1fea425fEncode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CryptoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1fea425fEncodeGithubComCapsulatedXTechApirequester(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CryptoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1fea425fEncodeGithubComCapsulatedXTechApirequester(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CryptoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1fea425fDecodeGithubComCapsulatedXTechApirequester(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CryptoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1fea425fDecodeGithubComCapsulatedXTechApirequester(l, v)
}
func easyjson1fea425fDecode(in *jlexer.Lexer, out *struct {
	Time             int64  `json:"time"`
	Symbol           string `json:"symbol"`
	Buy              string `json:"buy"`
	Sell             string `json:"sell"`
	ChangeRate       string `json:"changeRate"`
	ChangePrice      string `json:"changePrice"`
	High             string `json:"high"`
	Low              string `json:"low"`
	Vol              string `json:"vol"`
	VolValue         string `json:"volValue"`
	Last             string `json:"last"`
	AveragePrice     string `json:"averagePrice"`
	TakerFeeRate     string `json:"takerFeeRate"`
	MakerFeeRate     string `json:"makerFeeRate"`
	TakerCoefficient string `json:"takerCoefficient"`
	MakerCoefficient string `json:"makerCoefficient"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "symbol":
			out.Symbol = string(in.String())
		case "buy":
			out.Buy = string(in.String())
		case "sell":
			out.Sell = string(in.String())
		case "changeRate":
			out.ChangeRate = string(in.String())
		case "changePrice":
			out.ChangePrice = string(in.String())
		case "high":
			out.High = string(in.String())
		case "low":
			out.Low = string(in.String())
		case "vol":
			out.Vol = string(in.String())
		case "volValue":
			out.VolValue = string(in.String())
		case "last":
			out.Last = string(in.String())
		case "averagePrice":
			out.AveragePrice = string(in.String())
		case "takerFeeRate":
			out.TakerFeeRate = string(in.String())
		case "makerFeeRate":
			out.MakerFeeRate = string(in.String())
		case "takerCoefficient":
			out.TakerCoefficient = string(in.String())
		case "makerCoefficient":
			out.MakerCoefficient = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1fea425fEncode(out *jwriter.Writer, in struct {
	Time             int64  `json:"time"`
	Symbol           string `json:"symbol"`
	Buy              string `json:"buy"`
	Sell             string `json:"sell"`
	ChangeRate       string `json:"changeRate"`
	ChangePrice      string `json:"changePrice"`
	High             string `json:"high"`
	Low              string `json:"low"`
	Vol              string `json:"vol"`
	VolValue         string `json:"volValue"`
	Last             string `json:"last"`
	AveragePrice     string `json:"averagePrice"`
	TakerFeeRate     string `json:"takerFeeRate"`
	MakerFeeRate     string `json:"makerFeeRate"`
	TakerCoefficient string `json:"takerCoefficient"`
	MakerCoefficient string `json:"makerCoefficient"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"buy\":"
		out.RawString(prefix)
		out.String(string(in.Buy))
	}
	{
		const prefix string = ",\"sell\":"
		out.RawString(prefix)
		out.String(string(in.Sell))
	}
	{
		const prefix string = ",\"changeRate\":"
		out.RawString(prefix)
		out.String(string(in.ChangeRate))
	}
	{
		const prefix string = ",\"changePrice\":"
		out.RawString(prefix)
		out.String(string(in.ChangePrice))
	}
	{
		const prefix string = ",\"high\":"
		out.RawString(prefix)
		out.String(string(in.High))
	}
	{
		const prefix string = ",\"low\":"
		out.RawString(prefix)
		out.String(string(in.Low))
	}
	{
		const prefix string = ",\"vol\":"
		out.RawString(prefix)
		out.String(string(in.Vol))
	}
	{
		const prefix string = ",\"volValue\":"
		out.RawString(prefix)
		out.String(string(in.VolValue))
	}
	{
		const prefix string = ",\"last\":"
		out.RawString(prefix)
		out.String(string(in.Last))
	}
	{
		const prefix string = ",\"averagePrice\":"
		out.RawString(prefix)
		out.String(string(in.AveragePrice))
	}
	{
		const prefix string = ",\"takerFeeRate\":"
		out.RawString(prefix)
		out.String(string(in.TakerFeeRate))
	}
	{
		const prefix string = ",\"makerFeeRate\":"
		out.RawString(prefix)
		out.String(string(in.MakerFeeRate))
	}
	{
		const prefix string = ",\"takerCoefficient\":"
		out.RawString(prefix)
		out.String(string(in.TakerCoefficient))
	}
	{
		const prefix string = ",\"makerCoefficient\":"
		out.RawString(prefix)
		out.String(string(in.MakerCoefficient))
	}
	out.RawByte('}')
}
